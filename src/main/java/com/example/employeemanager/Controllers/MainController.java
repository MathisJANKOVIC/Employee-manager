package com.example.employeemanager.Controllers;

import java.util.Date;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.employeemanager.models.User;
import com.example.employeemanager.models.User.Privilege;
import com.example.employeemanager.repository.UserRepository;


@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data


    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (
        @RequestParam (name = "lastName") String lastName, 
        @RequestParam (name = "firstName") String firstName,  
        @RequestParam (name = "mail") String mail, 
        @RequestParam (name = "password") String password,
        @RequestParam (name = "privilege") Privilege privilege,
        @RequestParam (name = "hireDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date hireDate) {

        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

        User n = new User();
        n.setFirstName(firstName);
        n.setLastName(lastName);
        n.setHireDate(hireDate);
        n.setPassword(passwordEncoder.encode(password));
        n.setMail(mail);
        n.setPrivilege(privilege);
        userRepository.save(n);
        return "/home";
    }

    @PostMapping(path = "/update")
    public @ResponseBody String updateUser(
        @RequestParam (name = "id") int id, 
        @RequestParam (name = "lastName") String lastName, 
        @RequestParam (name = "firstName") String firstName,  
        @RequestParam (name = "mail") String mail, 
        @RequestParam (name = "password") String password,
        @RequestParam (name = "privilege") Privilege privilege,
        @RequestParam (name = "hireDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date hireDate) {

        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

        User existingUser = userRepository.findById(id).orElse(null);
        if (existingUser != null) {
            existingUser.setFirstName(firstName);
            existingUser.setLastName(lastName);
            existingUser.setHireDate(hireDate);
            existingUser.setPassword(passwordEncoder.encode(password));
            existingUser.setMail(mail);
            existingUser.setPrivilege(privilege);
            userRepository.save(existingUser);
            return "User updated";
        } else {
            return "User not found";
        }
    }

    @PostMapping(path = "/delete")
    public @ResponseBody String deleteUser(@RequestParam (name = "id") Integer id) {
        User userToDelete = userRepository.findById(id).orElse(null);
        if (userToDelete != null) {
            userRepository.delete(userToDelete);
            return "User deleted";
        } else {
            return "User not found";
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/connect")
    public @ResponseBody String connect(@RequestParam(name = "email") String email, @RequestParam(name = "password") String password) {
        User userToConnect = userRepository.findByMail(email);

        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

        if (userToConnect != null && passwordEncoder.matches(userToConnect.getPassword(), password)) {
            return "home.html";
        } else {
            return "login.html";
        }
    }
}